#!/bin/bash
# WARNING: this script will destroy data on the selected disk.
# This script can be run by executing the following:
#   curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/inst-archq | bash
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

ker=Q352WU; kver='6.6.17-12'

c_blue_b=$'\e[1;38;5;27m'
c_green_b=$'\e[1;38;5;46m'
c_red_b=$'\e[1;38;5;196m'
c_red=$'\e[1;33m'
c_white=$'\e[m'
c_white_b=$'\e[1;37m'
c_gray=$'\e[0;37m'

echo root:archq | chpasswd
pacman -Sy --noconfirm archlinux-keyring pacman-contrib dialog scrub
desk=$(dialog --stdout --title "ArchQ" --menu "Install" 7 0 0 M "Music Server|Player without GUI" D "Desktop with LMS|MPD Server") || exit 1; clear
[ $desk = D ] && curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/inst-desktop | bash
### Get infomation from user ###
password(){
    password=$(dialog --stdout --title "ArchQ" --inputbox "Enter admin password" 0 0) || exit 1; clear
    if [[ -z "$password" ]];then
        dialog --stdout --title "ArchQ" --pause "\n Passwd cannot be empty.\n\n Setting password again." 12 0 3 || exit 1; clear
        password
    fi
    password2=$(dialog --stdout --title "ArchQ" --inputbox "Enter password again" 0 0) || exit 1; clear
    if [[ "$password" != "$password2" ]]; then
        dialog --stdout --title "ArchQ" --pause "\n Passwd did not match.\n\n Setting password again." 12 0 3 || exit 1; clear
        password
    fi
}

hostname=ArchQ
# hostname=$(dialog --stdout --title "ArchQ" --inputbox "Enter hostname" 0 0) || exit 1; clear
# if [ -z "$hostname" ];then
#     dialog --stdout --title "ArchQ" --pause "\n Hostname cannot be empty.\n\n Default will be 'ArchQ'." 12 0 3 || exit 1; clear
#     hostname=$(dialog --stdout --title "ArchQ" --inputbox "Enter hostname again" 0 0) || exit 1; clear
# fi

user=$(dialog --stdout --title "ArchQ" --inputbox "Enter admin username" 0 0) || exit 1; clear
if [ -z "$user" ];then
    dialog --stdout --title "ArchQ" --pause "\n Username cannot be empty.\n\n Default will be 'archq'." 12 0 3 || exit 1; clear
user=archq
    user=$(dialog --stdout --title "ArchQ" --inputbox "Enter admin username again" 0 0) || exit 1; clear
fi
password
lang=$(dialog --stdout --title "ArchQ" --menu "Select language" 7 0 0 E "English" J "Japanese" T "Chinese TW") || exit 1; clear
devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
device=$(dialog --stdout --title "ArchQ" --menu "Select installtion disk" 0 0 0 ${devicelist}) || exit 1; clear
fmt=$(dialog --stdout --title "ArchQ" --menu "Format device ${device}" 7 0 0 E Entire P Partition U "USB Storage") || exit 1; clear
if [ $fmt = P ]; then
    partlst='dialog --stdout --title "Device $device" --menu "Select partition" 7 0 0 '
    while read line; do
        partname=$(echo $line | awk '{print $1}')
        partlable=$(echo $line | awk '{print substr($0,index($0,$2))}')
        partlst+=$partname' '\"$partlable\"' '
    done <<< $(lsblk -pln -o name,size,partlabel,fstype $device | sed -e '1d')
    part_root=$(eval $partlst) || exit 1; clear
    part_boot=$(lsblk -pln -o name,parttypename | grep EFI | grep $device | awk 'NR==1 {print $1}')
fi
zerofill=1
# zerofill=$(dialog --stdout --title "ArchQ" --inputbox "Wipe disk times" 0 30 0) || exit 1; clear
# f2fs=$(dialog --stdout --title "ArchQ" --menu "Format ${device} file system" 8 0 0 F "F2FS (SSD,Flash)" X "XFS (HDD)") || exit 1; clear
echo ${device} | grep -q 'nvme' && f2fs=F || f2fs=X
# ethers=$(ip -o link show | awk '{print $2,$9}' | grep '^en' | sed 's/://')
# ifport=$(dialog --stdout --title "ArchQ" --menu "Select net device" 7 0 0 ${ethers}) || exit 1; clear
ifport=$(ip -o link show | awk '{print $2,$9}' | grep -m1 '^en.*UP' | sed 's/:.*//')
ip=$(dialog --stdout --title "ArchQ" --menu "${ifport} IP setting" 7 0 0 D "DHCP" S "Static IP") || exit 1; clear
if [ $ip = S ]; then
ifmask=24; ifdns=8.8.8.8
ifconfig=$(dialog --stdout --title "ArchQ" --ok-label "Ok" --form "Enter $ifport IP setting" 10 35 0 \
            "Address" 1 1   "192.168.1."    1 10 15 0 \
            "Netmask" 2 1   "$ifmask"       2 10 15 0 \
            "Gateway" 3 1   "192.168.1.254" 3 10 15 0 \
            "DNS"     4 1   "$ifdns"        4 10 15 0) || exit 1; clear
ifaddr=$(echo $ifconfig | cut -d' ' -f1)
ifmast=$(echo $ifconfig | cut -d' ' -f2)
ifgw=$(echo $ifconfig | cut -d' ' -f3)
ifdns=$(echo $ifconfig | cut -d' ' -f4)
fi

player=N
server=$(dialog --stdout --title "ArchQ" \
        --menu "Select music server or player" 7 0 0 \
        LMS "Logitech Media Server" \
        MPD "MPD, Rigelian(iOS) | text-based client" \
        myMPD "MPD & myMPD web-based client" \
        RompR "MPD & RompR web-based client" \
        Roon "Roon Server" \
        HQPE5 "HQPlayer Embedded 5" \
        HQPE4 "HQPlayer Embedded 4" \
        Player "Airplay | Squeezelite | Roonbridge | HQP NAA" ) || exit 1; clear

case $server in
    LMS)
        player=$(dialog --stdout --title "ArchQ" --menu "Squeezelite Enable" 7 0 0 S Enable N Disable) || exit 1
        ;;
    MPD)
       server=$(dialog --stdout --title "ArchQ" \
                --radiolist "Select MPD version" 7 0 0 \
                mL "Light: pcm, flac" off \
                mS "Stream: +Light, dsd, radio" on \
                mM "MPEG: +Stream, mp3, aac, alac" off ) || exit 1
        ;;
    myMPD)
        server=$(dialog --stdout --title "ArchQ" \
                --radiolist "Select MPD version" 7 0 0 \
                yL "Light: pcm, flac" off \
                yS "Stream: +Light, dsd, radio" on \
                yM "MPEG: +Stream, mp3, aac, alac" off ) || exit 1
        ;;
    RompR)
       server=$(dialog --stdout --title "ArchQ" \
                --radiolist "Select MPD version" 7 0 0 \
                oL "Light: pcm, flac" off \
                oS "Stream: +Light, dsd, radio" on \
                oM "MPEG: +Stream, mp3, aac, alac" off ) || exit 1
        ;;
    Player)
        player=$(dialog --stdout --title "ArchQ" \
                --checklist "Select music player" 7 0 0 \
                A Airplay off \
                S Squeezelite off \
                R Roonbridge off \
                H "HQplayer NAA" off ) || exit 1
        ;;
esac
clear

### select sound card
scard="hw:0,0"

### Set up logging ###
exec 1> >(tee "stdout.log")
exec 2> >(tee "stderr.log")

timedatectl set-ntp true

mkboot(){
    # Wipe boot
    for ((i=1; i <= $zerofill; i++))
    do
        echo -e "${c_blue_b}Boot parition fills with zero -> $i${c_white_b}"
        scrub -Sp fillzero $part_boot
    done
    wipefs "${part_boot}"
    mkfs.vfat -F32 "${part_boot}"
}

# Foramt and install in one partition
old_efi=''
if [ $fmt = P ]; then
    # Rebuild partition if EFI < 200MB
    if [ $(lsblk $part_boot -pln -o size | tr -d [:alpha:]) -lt 200 ]; then
        boot_start=$(parted $device 'unit s' print | grep "^ ${part_root:0-1}" | tail -1 | awk -F '[[:space:]]*' '{ print $3 }')
        boot_end=$(expr ${boot_start::-1} + 524287)s
        root_start=$(expr ${boot_start::-1} + 524288)s
        parted --script "${device}" -- \
            rm "${part_root:0-1}" \
            mkpart EFI fat32 $boot_start $boot_end \
            set "${part_root:0-1}" boot on \
            mkpart ArchQ ext4 $root_start 100%
        old_efi=$part_boot
        part_boot=$part_root
        part_root=$(ls ${device}* | grep -E "^${device}p?$((${part_root:0-1} + 1))$")
        # Format boot partition (EFI/ESP)
        mkboot
    fi
else
    # Install in entire disk
    root_size=3800
    root_end=$(( $root_size + 257 + 1 ))MiB
    parted --script "${device}" -- mklabel gpt \
        mkpart EFI fat32 1Mib 257MiB \
        set 1 boot on \
        mkpart ArchQ ext4 257MiB ${root_end}
        # mkpart Database ext4 ${root_end} 100%

    # Simple globbing was not enough as on one device I needed to match /dev/mmcblk0p1
    # but not /dev/mmcblk0boot1 while being able to match /dev/sda1 on other devices.
    part_boot="$(ls ${device}* | grep -E "^${device}p?1$")"
    part_root="$(ls ${device}* | grep -E "^${device}p?2$")"
    # Format boot partition (EFI/ESP)
    mkboot
fi

# Wipe & format root partition
for ((i=1; i <= $zerofill; i++))
do
    echo -e "${c_blue_b}Root parition fills with zero -> $i${c_white_b}"
    scrub -Sp fillzero $part_root
done
[ $f2fs = F ] && mkfs.f2fs -fl ArchQ "${part_root}" || mkfs.xfs -fL ArchQ "${part_root}"

## Mount root & boot partition
mount "${part_root}" /mnt
mkdir /mnt/boot
mount "${part_boot}" /mnt/boot

## Roon server data partition
if [ $server = Roon ]; then
    parted --script "${device}" -- \
        mkpart Database ext4 ${root_end} 100%
    part_data="$(ls ${device}* | grep -E "^${device}p?3$")"
    wipefs "${part_data}"
    [ $f2fs = F ] && mkfs.f2fs -fl Database "${part_data}" || mkfs.xfs -fL Database "${part_data}"
    [ ! -d /mnt/var/roon ] && mkdir -p /mnt/var/roon
    mount "${part_data}" /mnt/var/roon
fi

cpu=intel; cat /proc/cpuinfo | grep -q AMD && cpu=amd
[ -f /mnt/boot/${cpu}-ucode.img ] || pacstrap /mnt ${cpu}-ucode

echo -e "\n${c_blue_b}Install Arch Linux package ...${c_gray}\n"
pacstrap /mnt base linux linux-firmware grub efibootmgr os-prober gptfdisk f2fs-tools xfsprogs openssh dhclient \
        vim nano wget avahi sudo dialog cpupower lm_sensors cronie ntp hdparm htop iwd nocache \
        which avahi glibc cifs-utils icu parted scrub mc usbutils tmux rsync nfs-utils \
        fmt libcdio libupnp liburing cdparanoia libcdio-paranoia libcddb libmms \
        confuse libev libplist libsodium libuv libwebsockets mxml protobuf protobuf-c python-mpd2 \
        nginx php-sqlite php-gd php-fpm php-intl imagemagick libwmf libjxl libconfig faad2 libmad \
        openmpi fftw boost openpmix hwloc taglib lua \
        perl-webservice-musicbrainz perl-musicbrainz-discid perl-net-ssleay perl-io-socket-ssl perl-uri perl-mojolicious \
        alsa-lib ffmpeg mympd ncmpcpp mpc rc-local \
        atomicparsley glyr imagemagick libao libdiscid libxslt opusfile schedtool srt vorbis-tools \
        python-chardet python-idna python-lxml python-requests python-urllib3
# mpd:         fmt libcdio libupnp liburing cdparanoia libcdio-paranoia libcddb libmms \
# confuse libev libplist libsodium libuv libwebsockets mxml protobuf protobuf-c python-mpd2 \        
# shairport-sync: libplist libsodium libsndfile
# abcde: atomicparsley imagemagick glyr libao opusfile vorbis-tools libdiscid libxslt libdiscid \
# LMS: python-chardet python-idna python-lxml python-requests python-urllib3 \
# mpd-plugin: perl-webservice-musicbrainz perl-musicbrainz-discid perl-net-ssleay perl-io-socket-ssl perl-uri perl-mojolicious

genfstab -Up /mnt | sed '/^$/d' >>/mnt/etc/fstab
sed -i 's/barrier,//g;s/relatime,lazytime/noatime/g;s/nodiscard,//g' /mnt/etc/fstab
cat >>/mnt/etc/fstab <<EOF
none /tmp tmpfs nodev,nosuid,mode=1777 0 0
none /var/log tmpfs nodev,nosuid,noexec,size=10M 0 0
none /var/tmp tmpfs nodev,nosuid,noexec,size=20M 0 0
EOF

echo "${hostname}" > /mnt/etc/hostname
echo -e "nameserver 8.8.8.8\nnameserver 1.1.1.1" >> /mnt/etc/resolv.conf
arch-chroot /mnt useradd -mU "$user"
sed -i '0,/# %wheel/s/# %wheel/%wheel/' /mnt/etc/sudoers
arch-chroot /mnt usermod -aG wheel $user
echo "$user $hostname =NOPASSWD: /usr/bin/systemctl poweroff,/usr/bin/systemctl halt,/usr/bin/systemctl reboot,/usr/bin/qboot,/usr/bin/sw,/usr/bin/config" >>/mnt/etc/sudoers

### Set locale language
echo -e "en_US.UTF-8 UTF-8\nja_JP.UTF-8 UTF-8\nzh_TW.UTF-8 UTF-8" >/mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
[ $lang = J ] && echo "LANG=ja_JP.UTF-8" > /mnt/etc/locale.conf
[ $lang = T ] && echo "LANG=zh_TW.UTF-8" > /mnt/etc/locale.conf
arch-chroot /mnt ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime
[ $lang = J ] && arch-chroot /mnt ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

# echo "$user:$password" | chpasswd --root /mnt
arch-chroot /mnt sh -c "echo $user:$password | chpasswd"
# echo "root:$password" | chpasswd --root /mnt
arch-chroot /mnt sh -c "echo root:$password | chpasswd"
arch-chroot /mnt mkinitcpio -p linux
arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --removable --bootloader-id=$hostname
arch-chroot /mnt sed -i 's/^#\?GRUB_DISABLE_OS_PROBER/GRUB_DISABLE_OS_PROBER/;s/^#\?GRUB_DISABLE_SUBMENU=.*$/GRUB_DISABLE_SUBMENU=y/' /etc/default/grub

echo $device | grep -q nvme && sed -i 's/MODULES=()/MODULES=(nvme)/' /mnt/etc/mkinitcpio.conf
[ $f2fs = X ] && sed -i 's/MODULES=()/MODULES=(xfs)/' /mnt/etc/mkinitcpio.conf

### Ethernet IP
echo ......................
echo "[Match]" >/mnt/etc/systemd/network/10-${ifport}.network
echo -e "Name=${ifport}\n" >>/mnt/etc/systemd/network/10-${ifport}.network
echo "[Network]" >>/mnt/etc/systemd/network/10-${ifport}.network
if [ $ip = D ]; then
    echo Install DHCP Client...
    echo "DHCP=ipv4" >>/mnt/etc/systemd/network/10-${ifport}.network
    arch-chroot /mnt systemctl enable avahi-daemon
else
    echo "Address=$ifaddr/$ifmask" >>/mnt/etc/systemd/network/10-${ifport}.network
    echo "Gateway=$ifgw" >>/mnt/etc/systemd/network/10-${ifport}.network
    echo "DNS=$ifgw $ifdns" >>/mnt/etc/systemd/network/10-${ifport}.network
fi
arch-chroot /mnt systemctl enable systemd-networkd

## Add Ethernet dectect to rc.local
sed -i '$d' /mnt/etc/rc.local
cat >>/mnt/etc/rc.local <<EOF
# ethernet auto detect
while read ether; do
    npath='/etc/systemd/network/'
    if [ ! -f "\$npath""10-\${ether}.network" ]; then
        cd \$npath
        source=\$(ls 10-en*.network | head -n 1)
        cp \$source 10-\${ether}.network
        sed -i 's/Name=.*/Name='"\$ether"'/' 10-\${ether}.network
        systemctl restart systemd-networkd
        cd -
    fi
done <<< \$(ip -o link show | awk '{print \$2,\$9}' | grep '^en' | sed 's/://' | awk '{print \$1}')
sleep 1

EOF

arch-chroot /mnt sh -c 'yes | pacman -Scc'
rm -rf /mnt/etc/pacman.d/gnupg
arch-chroot /mnt pacman-key --init
arch-chroot /mnt pacman-key --populate archlinux
arch-chroot /mnt pacman -Sy

### Kernel
echo -e "\n${c_blue_b}Install ArchQ Kernel ...${c_gray}\n"
[ $cpu = amd ] && ker=Q308AMD
[ $cpu = amd ] && kver='6.1.54-1'
# [ $server = N ] && ker=${ker}w
[ $fmt = U ] && ker=Q352WU
[ $fmt = U ] && kver='6.6.17-12'
arch-chroot /mnt wget -P /root https://raw.githubusercontent.com/sam0402/ArchQ/main/kernel/linux-${ker}-${kver}-x86_64.pkg.tar.zst
arch-chroot /mnt pacman -U --noconfirm /root/linux-${ker}-${kver}-x86_64.pkg.tar.zst
sed -i 's/loglevel=3/loglevel=0 nohz=off idle=poll rcu_nocb_poll acpi_pm_good nosmt noirqdebug no_timer_check clocksource=tsc tsc=reliable tsc=noirqtime tsc=nowatchdog hpet=disable intel_pstate=disable iomem=relaxed ipv6.disable=1 vsyscall=native/' \
/mnt/etc/default/grub
# sed -i 's/loglevel=3/loglevel=0 nohz=off idle=poll acpi_pm_good rcu_nocb_poll nosmt noirqdebug norandmaps no_timer_check clocksource=tsc tsc=reliable tsc=noirqtime tsc=nowatchdog hpet=disable \
# intel_pstate=disable iomem=relaxed vsyscall=native ipv6.disable=1 usbcore.autosuspend=-1 thermal.off=1 rcu.blimit=0 relax_domain_level=0 skew_tick=0/' /mnt/etc/default/grub

cpus=$(lscpu | grep 'Core(s) per socket:' | cut -d ':' -f2)
iso_1st=$((cpus-1)); iso_2nd=$((cpus/2-1))
#cpus=$(getconf _NPROCESSORS_ONLN)
isocpu=''
[ $cpus -ge 4 ] && [[ $server = LMS || $player =~ S ]] && isocpu="isolcpus=$iso_1st rcu_nocbs=$iso_1st "
[ $cpus -ge 6 ] && [ $server = LMS ] && [[ $player =~ S ]] && isocpu="isolcpus=$iso_1st,$iso_2nd rcu_nocbs=$iso_1st,$iso_2nd "
sed -i 's/GRUB_CMDLINE_LINUX=.*/GRUB_CMDLINE_LINUX="'"$isocpu"'"/' /mnt/etc/default/grub
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

## server
case $server in
    LMS)
        echo -e "\n${c_blue_b}Install Logitech Media Server ...${c_gray}\n"
        arch-chroot /mnt wget -P /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/logitechmediaserver-8.4.0-1-x86_64.pkg.tar.xz
        arch-chroot /mnt pacman -U --noconfirm /root/logitechmediaserver-8.4.0-1-x86_64.pkg.tar.xz
        [ $cpus -ge 4 ] && [[ ! $player =~ S ]] && sed -i 's/^PIDFile/#PIDFile/;/ExecStart=/iType=idle\nNice=-20\nExecStartPost=/usr/bin/taskset -cp '"$iso_1st"' $MAINPID' /mnt/usr/lib/systemd/system/logitechmediaserver.service
        [ $cpus -ge 6 ] && [[ $player =~ S ]] && sed -i 's/^PIDFile/#PIDFile/;/ExecStart=/iType=idle\nNice=-20\nExecStartPost=/usr/bin/taskset -cp '"$iso_2nd"' $MAINPID' /mnt/usr/lib/systemd/system/logitechmediaserver.service
        sed -i 's/novideo/novideo --charset=utf8/' /mnt/usr/lib/systemd/system/logitechmediaserver.service
        arch-chroot /mnt systemctl enable logitechmediaserver
        ;;
    Roon)
        echo -e "\n${c_blue_b}Install Roon Server ...${c_gray}\n"
        mkdir -p /mnt/opt/RoonServer /mnt/usr/share/licenses/roonserver
        arch-chroot /mnt wget -O - http://download.roonlabs.com/builds/RoonServer_linuxx64.tar.bz2 | bsdtar xf - -C /mnt/opt
        curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/roonserver.service >/mnt/usr/lib/systemd/system/roonserver.service
        chmod 644 /mnt/usr/lib/systemd/system/roonserver.service
        curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/roon_copyright >/mnt/usr/share/licenses/roonserver/COPYING
        sed -i 's/exec "$HARDLINK" "$SCRIPT.dll" "$@"/exec nice -n -20 "$HARDLINK" "$SCRIPT.dll" "$@"/g' /mnt/opt/RoonServer/Appliance/RAATServer
        arch-chroot /mnt systemctl enable roonserver
        ;;
    m?|y?|o?)
        [[ $server =~ .L ]] && MPD=light
        [[ $server =~ .S ]] && MPD=stream
        [[ $server =~ .M ]] && MPD=ffmpeg
        echo -e "\n${c_blue_b}Install MPD-${MPD}...${c_gray}\n"
        # pacstrap /mnt fmt libcdio libupnp liburing cdparanoia libcdio-paranoia libcddb libmms libid3tag ncmpcpp mpc python-mpd2 lua
        arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/mpd-${MPD}-0.23.14-12-x86_64.pkg.tar.zst
        arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/mpd_cdrom-1.0.0-1-any.pkg.tar.zst
        arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/owntone-28.6-1-x86_64.pkg.tar.zst
        arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/mpd-plugin-0.3.5-1-x86_64.pkg.tar.zst
        arch-chroot /mnt pacman -U --noconfirm /root/mpd_cdrom-1.0.0-1-any.pkg.tar.zst /root/mpd-plugin-0.3.5-1-x86_64.pkg.tar.zst /root/mpd-${MPD}-0.23.14-12-x86_64.pkg.tar.zst
        # dependencies for owntone
        # pacstrap /mnt confuse libev libplist libsodium libuv libwebsockets mxml protobuf protobuf-c
        arch-chroot /mnt pacman -U --noconfirm /root/owntone-28.6-1-x86_64.pkg.tar.zst
        arch-chroot /mnt systemctl enable mpd
        sed -i '58,92d' /mnt/usr/bin/mpd-plugin.py
        sed -i 's/daemon.socket/daemon.service/;s/pulseaudio/mpd/' /mnt/etc/systemd/system/owntone.service
        sed -i 's/daemon.socket/daemon.service/;s/pulseaudio/mpd/' /mnt/etc/systemd/system/owntone\@.service
        ### Install myMPD
        if [[ $server =~ y. ]]; then
            echo -e "\n${c_blue_b}Install myMPD ...${c_gray}\n"
            arch-chroot /mnt wget -P /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/mympd-12.1.1-1-x86_64.pkg.tar.zst
            # arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/libnewt-0.52.24-2-x86_64.pkg.tar.zst
            arch-chroot /mnt pacman -U --noconfirm /root/mympd-12.1.1-1-x86_64.pkg.tar.zst
            arch-chroot /mnt systemctl enable mympd
        fi
        ### Install RompR
        if [[ $server =~ o. ]]; then
            echo -e "\n${c_blue_b}Install RompR ...${c_gray}\n"
            # pacstrap /mnt nginx php-sqlite php-gd php-fpm php-intl imagemagick
            arch-chroot /mnt wget -P /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/rompr-2.00-1-any.pkg.tar.zst
            arch-chroot /mnt pacman -U --noconfirm /root/rompr-2.00-1-any.pkg.tar.zst
            mkdir -p /mnt/etc/nginx/sites-available /mnt/etc/nginx/sites-enabled
            sed -i '$i include /etc/nginx/sites-enabled/*;' /mnt/etc/nginx/nginx.conf
            curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/rompr_nginx >/mnt/etc/nginx/sites-available/rompr
            curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/cantata_nginx >/mnt/etc/nginx/sites-available/cantata
            sed -i 's/hostname/'"${hostname,,}"'/' /mnt/etc/nginx/sites-available/rompr
            sed -i 's/hostname/'"${hostname,,}"'/' /mnt/etc/nginx/sites-available/cantata
            sed -i 's/max_execution_time =.*/max_execution_time = 1800/;s/post_max_size =.*/post_max_size = 256M/;s/upload_max_filesize =.*/upload_max_filesize = 10M/;s/max_file_uploads =.*/max_file_uploads = 200/' /mnt/etc/php/php.ini
            sed -i 's/;extension=pdo_sqlite/extension=pdo_sqlite/;s/;extension=gd/extension=gd/;s/;extension=intl/extension=intl/' /mnt/etc/php/php.ini
            sed -i '/ExecStart=/i ExecStartPre=mkdir -p \/var\/log\/nginx' /mnt/usr/lib/systemd/system/nginx.service
            arch-chroot /mnt ln -s /etc/nginx/sites-available/rompr /etc/nginx/sites-enabled/rompr
            arch-chroot /mnt chmod 644 /etc/nginx/sites-enabled/rompr
            arch-chroot /mnt systemctl enable nginx php-fpm avahi-daemon
        fi
### setup mpd
        [[ -n "$scard" ]] && sed -i 's/^#\?.* \?\tdevice.*"/\tdevice '"\"$scard\""'/' /mnt/etc/mpd.conf
        sed -i 's/^include_optional/#include_optional/g' /mnt/etc/mpd.conf
#### add priority for MPD
        cat >>/mnt/etc/rc.local <<EOF
if systemctl is-active mpd >/dev/null; then
    chrt -p 93 \$(ps H -q \`pidof -s mpd\` -o tid,cls | grep FF | awk '{print \$1}')
    chrt -p 95 \$(ps H -q \`pidof -s mpd\` -o tid,comm | grep ArchQ | awk '{print \$1}')
    chrt -fp 85 \`pgrep mpd\`
fi

EOF
### Start mpd.. etc. service
        arch-chroot /mnt systemctl disable mpd.socket
        arch-chroot /mnt usermod -aG optical mpd
        ;;
    HQPE4|HQPE5)
        echo -e "\n${c_blue_b}Install HQPlayer Embedded${server:4:1}...${c_gray}\n"
        curl https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/hqplayerd-lib.tar.gz | tar zxf - -C /tmp
        curl -O --output-dir /tmp/hqplayerd-lib/ https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/gtk3-1%3A3.24.37-1-x86_64.pkg.tar.zst
        pacman -U --noconfirm -r /mnt /tmp/hqplayerd-lib/*.pkg.tar.zst
        hqe_deb=$(curl -sL https://www.signalyst.eu/bins/hqplayerd/jammy/ | grep "hqplayerd_${server:4:1}" | grep _amd64.deb | tail -n1 | awk -F'"' '{print $2}')
        curl -L "https://www.signalyst.eu/bins/hqplayerd/jammy/$hqe_deb" | bsdtar xf - -C /tmp
        mkdir -p /tmp/hqpd
        bsdtar xf /tmp/data.tar.zst -C /tmp/hqpd
        rm -rf /tmp/hqpd/lib
        cp -af /tmp/hqpd/* /mnt/.
        arch-chroot /mnt install -Dm644 "/usr/share/doc/hqplayerd/copyright" "/usr/share/licenses/hqplayer/COPYING"
        arch-chroot /mnt rm "/usr/share/doc/hqplayerd/copyright"
        arch-chroot /mnt mkdir -p /var/lib/hqplayer/home /etc/pki/tls/certs
        curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/hqplayerd.service >/mnt/usr/lib/systemd/system/hqplayerd.service

        ## lib link
        arch-chroot /mnt ln -s /usr/liblibgupnp-1.2.so.1 /usr/lib/libgupnp-1.2.so.0
        arch-chroot /mnt ln -s /usr/liblibgupnp-av-1.0.so.3 /usr/lib/libgupnp-av-1.0.so.2
        arch-chroot /mnt ln -s /usr/liblibomp.so /usr/lib/libomp.so.5
        arch-chroot /mnt ln -s /usr/liblibFLAC.so.12 /usr/lib/libFLAC.so.8
        arch-chroot /mnt ln -s /opt/hqplayerd/lib/libsgllnx64-2.29.02.so /usr/lib/libsgllnx64-2.29.02.so
        arch-chroot /mnt ln -s /opt/hqplayerd/lib/libsglarm64-2.31.0.0.so /usr/lib/libsglarm64-2.31.0.0.so
        arch-chroot /mnt ln -s /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt
        arch-chroot /mnt systemctl enable hqplayerd
        ;;
esac

if [[ $player =~ S ]]; then
    echo -e "\n${c_blue_b}Install Squeezelite ...${c_gray}\n"
    # pacstrap /mnt faad2 libmad
    arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/squeezelite-1.9.8.1317-pcm-x86_64.pkg.tar.zst
    arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/squeezelite-1.9.8.1317-dsd-x86_64.pkg.tar.zst
    arch-chroot /mnt pacman -U --noconfirm /root/squeezelite-1.9.8.1317-dsd-x86_64.pkg.tar.zst
    [[ -n "$scard" ]] && sed -i 's/^AUDIO_DEV="-o .*/AUDIO_DEV="-o '"$scard"'"/' /mnt/etc/squeezelite.conf
    arch-chroot /mnt systemctl enable squeezelite
fi
if [[ $player =~ A ]]; then
    echo -e "\n${c_blue_b}Install Airplay ...${c_gray}\n"
    # pacstrap /mnt libconfig
    arch-chroot /mnt wget -P /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/shairport-sync-4.3.3-2-x86_64.pkg.tar.zst
    arch-chroot /mnt wget -P /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/nqptp-1.2.5-1-x86_64.pkg.tar.zst
    arch-chroot /mnt pacman -U --noconfirm /root/shairport-sync-4.3.3-2-x86_64.pkg.tar.zst /root/nqptp-1.2.5-1-x86_64.pkg.tar.zst
    curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/shairport-sync.service >/mnt/usr/lib/systemd/system/shairport-sync.service
    [[ -n "$scard" ]] && sed -i 's/^\/\?\/\?\toutput_device = ".*";/\toutput_device = '"\"$scard\""';/' /mnt/etc/shairport-sync.conf
    sed -i 's/^\/\?\/\?\tresync_threshold_in_seconds = 0.050;/\tresync_threshold_in_seconds = 0.010;/' /mnt/etc/shairport-sync.conf
    sed -i '/Install\n/iNice=-20\nAllowedCPUs='\"$iso_1st\"'\n' /mnt/usr/lib/systemd/system/shairport-sync.service
    arch-chroot /mnt systemctl enable shairport-sync nqptp
fi
if  [[ $player =~ R ]]; then
    echo echo -e "\n${c_blue_b}Install Roonbridge ...${c_gray}\n"
    arch-chroot /mnt wget -P /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/roonbridge-1.8.1125-2-x86_64.pkg.tar.zst
    arch-chroot /mnt pacman -U --noconfirm /root/roonbridge-1.8.1125-2-x86_64.pkg.tar.zst
    arch-chroot /mnt systemctl enable roonbridge
fi
if  [[ $player =~ H ]]; then
    echo echo -e "\n${c_blue_b}Install HQPlayer NAA ...${c_gray}\n"
    arch-chroot /mnt wget -P /tmp https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/hqplayer-network-audio-daemon-4.4.0-1-x86_64.pkg.tar.zst
    arch-chroot /mnt pacman -U --noconfirm /root/hqplayer-network-audio-daemon-4.4.0-1-x86_64.pkg.tar.zst
    arch-chroot /mnt systemctl enable networkaudio
fi
### Other setting
echo -e "\n${c_blue_b}Setting service ...${c_gray}\n"
cp /archq/qt5-base-5.15.9+kde+r151-1-x86_64.pkg.tar.zst /archq/kid3-common-3.9.3-2-x86_64.pkg.tar.zst /archq/double-conversion-3.2.1-1-x86_64.pkg.tar.zst /mnt/root
## Instal alsa-lib-1.1.9
cp /archq/alsa-utils-1.2.8-1-x86_64.pkg.tar.zst /mnt/root
arch-chroot /mnt wget -P /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/alsa-lib-1.1.9-3-x86_64.pkg.tar.zst
arch-chroot /mnt pacman -U --noconfirm --overwrite '*' /root/alsa-lib-1.1.9-3-x86_64.pkg.tar.zst
arch-chroot /mnt pacman -Udd --noconfirm /root/alsa-utils-1.2.8-1-x86_64.pkg.tar.zst /root/qt5-base-5.15.9+kde+r151-1-x86_64.pkg.tar.zst /root/kid3-common-3.9.3-2-x86_64.pkg.tar.zst /root/double-conversion-3.2.1-1-x86_64.pkg.tar.zst

pacman -Sdd --noconfirm qt5-base kid3-common double-conversion
arch-chroot /mnt systemctl disable avahi-daemon.socket

cat >>/mnt/etc/rc.local <<EOF
# systemctl stop systemd-journald-dev-log.socket systemd-journald.socket systemd-journald
# systemctl stop systemd-udevd-kernel.socket systemd-udevd-control.socket
# Play CD on MPD don't uncomment
# systemctl stop systemd-udevd
# systemctl stop systemd-networkd

#** Set readahead for HDD
# hdparm -a0 /dev/sda >/dev/null 2>&1

#** Set the standby timeout for HDD, the values specify multiples of 5 seconds.
# hdparm -S 24 /dev/sda

#** Reorganizer for XFS
# xfs_fsr /mnt/music

# Qrip stop all service
[[ "$(uname -r | cut -d- -f3)" = "Qrip" ]] && srvmode-cfg.sh stopsrv

# Mode active
active=\$(head -n 1 /etc/srvmode.conf | awk -F= '{print \$2}')
if [ ! \$active == '' ]; then
    service=\$(grep \$active /etc/srvmode.conf | awk -F: '{print \$2}' | \\
        sed -e 's/\(.*\)/\L\1/;s/lms/logitechmediaserver/;s/"hqplayer naa"/naa/;s/owntone/mtroom/;')
    for i in \$service; do
        sw \$i >/dev/null 2>&1
        sleep 0.2
    done
fi

exit 0
EOF
arch-chroot /mnt systemctl enable sshd ntpdate rc-local cpupower
arch-chroot /mnt systemctl disable ntpd
arch-chroot /mnt ln -s /usr/bin/vim /usr/bin/vi
arch-chroot /mnt touch /etc/srvmode.conf
###
echo 'ACTION=="add", SUBSYSTEM=="pci", ATTR{power/control}="auto"' >/mnt/etc/udev/rules.d/pci_pm.rules
cat >/mnt/etc/udev/rules.d/60-ioschedulers.rules <<EOF
# set scheduler for NVMe
ACTION=="add|change", KERNEL=="nvme[0-9]n[0-9]", ATTR{queue/scheduler}="none"
# set scheduler for SSD and eMMC
ACTION=="add|change", KERNEL=="sd[a-z]|mmcblk[0-9]*", ATTR{queue/rotational}=="0", ATTR{queue/scheduler}="kyber"
# set scheduler for rotating disks
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1", ATTR{queue/scheduler}="bfq"
EOF
# cat >/mnt/etc/udev/rules.d/69-hdparm.rules <<EOF
# ACTION=="add|change", KERNEL=="sd[a-z]", ATTRS{queue/rotational}=="1", RUN+="/usr/bin/hdparm -a 0 -A 0 /dev/%k"
# EOF
curl -sL https://raw.githubusercontent.com/bb-qq/r8152/master/50-usb-realtek-net.rules >/mnt/etc/udev/rules.d/50-usb-realtek-net.rules
# hot plug
#curl -sL https://raw.githubusercontent.com/bb-qq/r8152/master/51-usb-r8152-net.rules >/mnt/etc/udev/rules.d/51-usb-r8152-net.rules
sed -i 's/#Storage=auto/Storage=none/' /mnt/etc/systemd/journald.conf
sed -i 's/wait-online/wait-online --any/' /mnt/usr/lib/systemd/system/systemd-networkd-wait-online.service
### install config file
# curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/pacman.conf >/mnt/etc/pacman.conf
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/update >/mnt/root/.update
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/timezone.sh >/mnt/usr/bin/timezone.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/sqzlite-cfg.sh >/mnt/usr/bin/sqzlite-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/nfs-cfg.sh >/mnt/usr/bin/nfs-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/nfserver-cfg.sh >/mnt/usr/bin/nfserver-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/smb-cfg.sh >/mnt/usr/bin/smb-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/ether-cfg.sh >/mnt/usr/bin/ether-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/kernel-cfg.sh >/mnt/usr/bin/kernel-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/cpu-cfg.sh >/mnt/usr/bin/cpu-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/partimnt-cfg.sh >/mnt/usr/bin/partimnt-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/update_scpt.sh >/mnt/usr/bin/update_scpt.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/player-cfg.sh >/mnt/usr/bin/player-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/server-cfg.sh >/mnt/usr/bin/server-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/desktop-cfg.sh >/mnt/usr/bin/desktop-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/shairport-cfg.sh >/mnt/usr/bin/shairport-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/mpd-cfg.sh >/mnt/usr/bin/mpd-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/abcde-cfg.sh >/mnt/usr/bin/abcde-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/srvmode-cfg.sh >/mnt/usr/bin/srvmode-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/sync_backup-cfg.sh >/mnt/usr/bin/sync_backup-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/bcache-cfg.sh >/mnt/usr/bin/bcache-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/datacache-cfg.sh >/mnt/usr/bin/datacache-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/hddpower-cfg.sh >/mnt/usr/bin/hddpower-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/zerowipe.sh >/mnt/usr/bin/zerowipe.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/config.sh >/mnt/usr/bin/config.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/qboot >/mnt/usr/bin/qboot
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/mboot >/mnt/usr/bin/mboot
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/sw >/mnt/usr/bin/sw
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/usb-storage-mount.sh >/mnt/usr/bin/usb-storage-mount.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/90-usb-storage-automount.rules >/mnt/etc/udev/rules.d/90-usb-storage-automount.rules
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/pagecache-management.sh >/mnt/usr/bin/pagecache-management.sh
arch-chroot /mnt wget -qP /usr/bin https://raw.githubusercontent.com/sam0402/ArchQ/main/config/pagecache-management.so
chmod +x /mnt/usr/bin/*.sh /mnt/usr/bin/qboot /mnt/usr/bin/mboot /mnt/usr/bin/sw
arch-chroot /mnt ln -s /usr/bin/config.sh /usr/bin/config

cat >>/mnt/home/${user}/.bashrc <<EOF
\$(uname -r | grep -q Qrip) && PSC=36 || PSC=31
export KVER=\$(uname -r | cut -d- -f3)
alias ...='cd ../../'
alias dir='command ls -lSrah'
alias egrep='egrep --color=auto'
alias grep='grep --color=auto'
alias ll='command ls -l --color=auto -v'
alias ls='command ls --color=auto -v'
alias abcde='eject -t; abcde'
alias poweroff='sudo systemctl poweroff'
alias reboot='sudo systemctl reboot'
alias qboot='sudo qboot'
alias config='sudo config.sh'
alias sw='sudo sw'
alias df='df -h'
alias status='systemctl status'
alias album='kid3-cli -c "set album '\''\$ALBUM'\''"'
alias artist='kid3-cli -c "set artist '\''\$ARTIST'\''"'
alias track='kid3-cli -c "set title '\''\$TRACK'\''"'
alias genre='kid3-cli -c "set genre '\''\$GENRE'\''"'
alias composer='kid3-cli -c "set composer '\''\$COMPOSER'\''"'
alias wipedir='function _f() { for i in {1..5}; do find "\$1" -exec scrub -Sp fillzero {} \\;; done; rm -rf "\$1"; } ; _f'
alias hcp='function _f() { echo "\$1 >> \$2"; for i in {1..50}; do [ -z \$2 ] && break; nocache cp -a "\$1" "\$2";echo -n .\$((\$i*2));nocache cp -a "\$2"/"\$1" .;done; }; _f'
alias fflac='function _f() { mkdir -p "\$2"/"\$1"; cp "\$1"/*.{pdf,jp*g} "\$2"/"\$1"; for i in "\$1"/*.flac; do ffmpeg -i "\$i" -vn -c:a flac -compression_level 1 -fflags +bitexact "\$2"/"\$i"; done; } ; _f'
alias dflac='function _f() { for d in "\$1"/*;do fflac "\$d" "\$2";done; }; _f'
EOF
sed -i 's/\\h/\\h:\\e[0\;${PSC}m$KVER\\e[m/' /mnt/home/${user}/.bashrc

cat >>/mnt/root/.bashrc <<EOF
\$(uname -r | grep -q Qrip) && PSC=36 || PSC=31
export KVER=\$(uname -r | cut -d- -f3)
PS1='[\u@\h:\e[0;\${PSC}m\$KVER\e[m \W]\$ '
alias ...='cd ../../'
alias dir='command ls -lSrah'
alias egrep='egrep --color=auto'
alias grep='grep --color=auto'
alias ll='command ls -l --color=auto -v'
alias ls='command ls --color=auto -v'
alias df='df -h'
alias status='systemctl status'
EOF
# echo 'server-cfg.sh' >/mnt/root/.bash_profile
# echo 'rm /root/.bash_profile' >>/mnt/root/.bash_profile
rm -f /mnt/root/*.tar.zst /mnt/root/*.tar.xz
# Detect other OS
if [ -n "$old_efi" ]; then
    arch-chroot /mnt mount "$old_efi" /mnt
    arch-chroot /mnt os-prober
    sleep 2
    arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
fi

dialog --stdout --title "ArchQ" --pause "\n  ArchQ is installed, unplug the USB driver.\n\n  System will reboot after 10 seconds." 12 50 10; clear
reboot
