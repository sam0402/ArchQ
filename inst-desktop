#!/bin/bash
# WARNING: this script will destroy data on the selected disk.
# This script can be run by executing the following:
#   curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/inst-desktop | bash
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
c_blue_b=$'\e[1;38;5;27m'
c_green_b=$'\e[1;38;5;46m'
c_red_b=$'\e[1;38;5;196m'
c_red=$'\e[1;33m'
c_white=$'\e[m'
c_white_b=$'\e[1;37m'
c_gray=$'\e[0;37m'

### Get infomation from user ###
password(){
    password=$(dialog --stdout --title "ArchQ Desktop" --inputbox "Enter admin password" 0 0) || exit 1; clear
    if [[ -z "$password" ]];then
        dialog --stdout --title "ArchQ Desktop" --pause "\n Passwd cannot be empty.\n\n Setting password again." 12 0 3 || exit 1; clear
        password
    fi
    password2=$(dialog --stdout --title "ArchQ Desktop" --inputbox "Enter password again" 0 0) || exit 1; clear
    if [[ "$password" != "$password2" ]]; then
        dialog --stdout --title "ArchQ Desktop" --pause "\n Passwd did not match.\n\n Setting password again." 12 0 3 || exit 1; clear
        password
    fi
}

hostname=$(dialog --stdout --title "ArchQ Desktop" --inputbox "Enter hostname" 0 0) || exit 1; clear
if [ -z "$hostname" ];then
    dialog --stdout --title "ArchQ Desktop" --pause "\n Hostname cannot be empty.\n\n Default will be 'ArchQ'." 12 0 3 || exit 1; clear
    hostname=Desktop
    hostname=$(dialog --stdout --title "ArchQ Desktop" --inputbox "Enter hostname again" 0 0) || exit 1; clear
fi

user=$(dialog --stdout --title "ArchQ Desktop" --inputbox "Enter admin username" 0 0) || exit 1; clear
if [ -z "$user" ];then
    dialog --stdout --title "ArchQ Desktop" --pause "\n Username cannot be empty.\n\n Default will be 'archq'." 12 0 3 || exit 1; clear
    user=archq
    user=$(dialog --stdout --title "ArchQ Desktop" --inputbox "Enter admin username again" 0 0) || exit 1; clear
fi
password
lang=$(dialog --stdout --title "ArchQ Desktop" --menu "Select language" 7 0 0 E "English" J "Japanese" T "Chinese TW") || exit 1; clear
devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
device=$(dialog --stdout --title "ArchQ Desktop" --menu "Select installtion disk" 0 0 0 ${devicelist}) || exit 1; clear
fmt=$(dialog --stdout --title "ArchQ Desktop" --menu "Format device ${device}" 7 0 0 E Entire P Partition U "USB Storage") || exit 1; clear
if [ $fmt = P ]; then
    partlst='dialog --stdout --title "Device $device" --menu "Select partition" 7 0 0 '
    while read line; do
        partname=$(echo $line | awk '{print $1}')
        partlable=$(echo $line | awk '{print substr($0,index($0,$2))}')
        partlst+=$partname' '\"$partlable\"' '
    done <<< $(lsblk -pln -o name,size,partlabel,fstype $device | sed -e '1d')
    part_root=$(eval $partlst) || exit 1; clear
    part_boot=$(lsblk -pln -o name,parttypename | grep EFI | awk 'NR==1 {print $1}')
fi

f2fs=$(dialog --stdout --title "ArchQ Desktop" --menu "Format ${device} file system" 8 0 0 F "F2FS (SSD,Flash)" X "XFS (HDD)") || exit 1; clear
ethers=$(ip -o link show | awk '{print $2,$9}' | grep '^en' | sed 's/://')
ifport=$(dialog --stdout --title "ArchQ Desktop" --menu "Select net device" 7 0 0 ${ethers}) || exit 1; clear
ip=$(dialog --stdout --title "ArchQ Desktop" --menu "Select IP setting" 7 0 0 D "DHCP" S "Static IP") || exit 1; clear
if [ $ip = S ]; then
ifmask=24; ifdns=8.8.8.8
ifconfig=$(dialog --stdout --title "ArchQ Desktop" --ok-label "Ok" --form "Enter $ifport IP setting" 10 35 0 \
            "Address" 1 1   ""          1 10 15 0 \
            "Netmask" 2 1   "$ifmask"   2 10 15 0 \
            "Gateway" 3 1   ""          3 10 15 0 \
            "DNS"     4 1   "$ifdns"    4 10 15 0) || exit 1; clear
ifaddr=$(echo $ifconfig | cut -d' ' -f1)
ifmast=$(echo $ifconfig | cut -d' ' -f2)
ifgw=$(echo $ifconfig | cut -d' ' -f3)
ifdns=$(echo $ifconfig | cut -d' ' -f4)
fi

desktop=$(dialog --stdout --title "ArchQ Desktop" --menu "Desktop & VNC :5901" 7 0 0 D LXDE Q LXQt V "VNC only") || exit 1

### Set up logging ###
exec 1> >(tee "stdout.log")
exec 2> >(tee "stderr.log")

timedatectl set-ntp true

mkboot(){
    mkfs.vfat -F32 "${part_boot}"
}

# Foramt and install in one partition
old_efi=''
if [ $fmt = P ]; then
    # Rebuild partition if EFI < 200MB
    if [ $(lsblk $part_boot -pln -o size | tr -d [:alpha:]) -lt 200 ]; then
        boot_start=$(parted $device 'unit s' print | grep "^ ${part_root:0-1}" | tail -1 | awk -F '[[:space:]]*' '{ print $3 }')
        boot_end=$(expr ${boot_start::-1} + 524287)s
        root_start=$(expr ${boot_start::-1} + 524288)s
        parted --script "${device}" -- \
            rm "${part_root:0-1}" \
            mkpart EFI fat32 $boot_start $boot_end \
            set "${part_root:0-1}" boot on \
            mkpart ArchQ ext4 $root_start 100%
        old_efi=$part_boot
        part_boot=$part_root
        part_root=$(ls ${device}* | grep -E "^${device}p?$((${part_root:0-1} + 1))$")
        # Format boot partition (EFI/ESP)
        mkboot
    fi
else
    # Install in entire disk
    root_size=5800
    root_end=$(( $root_size + 257 + 1 ))MiB
  parted --script "${device}" -- mklabel gpt \
        mkpart EFI fat32 1Mib 257MiB \
    set 1 boot on \
        mkpart ArchQ ext4 257MiB ${root_end}
        # mkpart Database ext4 ${root_end} 100%

# Simple globbing was not enough as on one device I needed to match /dev/mmcblk0p1 
# but not /dev/mmcblk0boot1 while being able to match /dev/sda1 on other devices.
part_boot="$(ls ${device}* | grep -E "^${device}p?1$")"
    part_root="$(ls ${device}* | grep -E "^${device}p?2$")"
    # Format boot partition (EFI/ESP)
    mkboot
fi

# format root partition
[ $f2fs = F ] && mkfs.f2fs -fl ArchQ "${part_root}" || mkfs.xfs -fL ArchQ "${part_root}"

## Mount root & boot partition
mount "${part_root}" /mnt
mkdir /mnt/boot
mount "${part_boot}" /mnt/boot

cpu=intel; cat /proc/cpuinfo | grep -q AMD && cpu=amd
[ -f /mnt/boot/${cpu}-ucode.img ] || pacstrap /mnt ${cpu}-ucode

echo -e "\n${c_red_b}Download Arch Linux package and install ...${c_gray}\n"
lxd=''
[ $desktop = D ] && lxd="lxdm noto-fonts-cjk midori cantata fcitx5-im fcitx5-configtool falkon lxde lxpanel"
[ $desktop = Q ] && lxd="lxdm noto-fonts-cjk midori cantata fcitx5-im fcitx5-configtool falkon lxqt xdg-utils breeze-icons fcitx5-qt fcitx5-chewing fcitx5-mozc"
pacstrap /mnt base linux linux-firmware grub efibootmgr os-prober gptfdisk f2fs-tools xfsprogs openssh dhclient \
        vim nano wget avahi sudo dialog cpupower lm_sensors cronie ntp hdparm iwd \
        tigervnc upplay xf86-video-fbdev audacious ${lxd}
[ $desktop = D ] && arch-chroot /mnt pacman -R --noconfirm lxmusic
[ $desktop = Q ] && arch-chroot /mnt pacman -R --noconfirm lxqt-powermanagement

genfstab -Up /mnt | sed '/^$/d' >>/mnt/etc/fstab
sed -i 's/barrier,//g;s/relatime,lazytime/noatime/g;s/nodiscard,//g' /mnt/etc/fstab
cat >>/mnt/etc/fstab <<EOF
none /tmp tmpfs nodev,nosuid,noexec,mode=1777 0 0
none /var/log tmpfs nodev,nosuid,noexec,size=10M 0 0
none /var/tmp tmpfs nodev,nosuid,noexec,size=20M 0 0
EOF

echo "${hostname}" > /mnt/etc/hostname
echo -e "nameserver 8.8.8.8\nnameserver 1.1.1.1" >> /mnt/etc/resolv.conf
arch-chroot /mnt useradd -mU "$user"
sed -i '0,/# %wheel/s/# %wheel/%wheel/' /mnt/etc/sudoers
arch-chroot /mnt usermod -aG wheel $user
echo "$user $hostname =NOPASSWD: /usr/bin/systemctl poweroff,/usr/bin/systemctl halt,/usr/bin/systemctl reboot,/usr/bin/qboot,/usr/bin/sw" >>/mnt/etc/sudoers

### Set locale language
echo -e "en_US.UTF-8 UTF-8\nja_JP.UTF-8 UTF-8\nzh_TW.UTF-8 UTF-8" >/mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
[ $lang = J ] && echo "LANG=ja_JP.UTF-8" > /mnt/etc/locale.conf
[ $lang = T ] && echo "LANG=zh_TW.UTF-8" > /mnt/etc/locale.conf
arch-chroot /mnt ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime
[ $lang = J ] && arch-chroot /mnt ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

# echo "$user:$password" | chpasswd --root /mnt
arch-chroot /mnt sh -c "echo $user:$password | chpasswd"
# echo "root:$password" | chpasswd --root /mnt
arch-chroot /mnt sh -c "echo root:$password | chpasswd"
arch-chroot /mnt mkinitcpio -p linux
arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --removable --bootloader-id=$hostname
arch-chroot /mnt sed -i 's/^#\?GRUB_DISABLE_OS_PROBER/GRUB_DISABLE_OS_PROBER/;s/^#\?GRUB_DISABLE_SUBMENU=.*$/GRUB_DISABLE_SUBMENU=y/' /etc/default/grub

echo $device | grep -q nvme && sed -i 's/MODULES=()/MODULES=(nvme)/' /mnt/etc/mkinitcpio.conf
[ $f2fs = X ] && sed -i 's/MODULES=()/MODULES=(xfs)/' /mnt/etc/mkinitcpio.conf

### Ethernet IP
echo ......................
echo "[Match]" >/mnt/etc/systemd/network/10-${ifport}.network
echo -e "Name=${ifport}\n" >>/mnt/etc/systemd/network/10-${ifport}.network
echo "[Network]" >>/mnt/etc/systemd/network/10-${ifport}.network
if [ $ip = D ]; then
    echo Install DHCP Client...
    echo "DHCP=ipv4" >>/mnt/etc/systemd/network/10-${ifport}.network
    arch-chroot /mnt systemctl enable avahi-daemon
else
    echo "Address=$ifaddr/$ifmask" >>/mnt/etc/systemd/network/10-${ifport}.network
    echo "Gateway=$ifgw" >>/mnt/etc/systemd/network/10-${ifport}.network
    echo "DNS=$ifgw $ifdns" >>/mnt/etc/systemd/network/10-${ifport}.network
fi
    arch-chroot /mnt systemctl enable systemd-networkd

### Kernel
echo -e "\n${c_red_b}Install ArchQ Kernel ...${c_gray}\n"
ker=evl; kver='6.1.29-12'
arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/kernel/linux-${ker}-${kver}-x86_64.pkg.tar.zst
arch-chroot /mnt pacman -U --noconfirm /root/linux-${ker}-${kver}-x86_64.pkg.tar.zst
sed -i 's/loglevel=3/loglevel=0 nohz=off idle=poll rcu_nocb_poll acpi_pm_good nosmt noirqdebug no_timer_check clocksource=tsc tsc=reliable tsc=noirqtime hpet=disable intel_pstate=disable iomem=relaxed ipv6.disable=1 vsyscall=native/' \
/mnt/etc/default/grub
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# Add /etc/rc.local
arch-chroot /mnt wget -qP /root https://raw.githubusercontent.com/sam0402/ArchQ/main/pkg/rc-local-4-1-any.pkg.tar.zst
arch-chroot /mnt pacman -U --noconfirm /root/rc-local-4-1-any.pkg.tar.zst

### Setup Desktop (LXDE || LDQT)
echo "LANG=en_US.UTF-8" >/mnt/home/$user/.xinitrc
[ $lang = J ] && echo "LANG=ja_JP.UTF-8" > /mnt/home/$user/.xinitrc
[ $lang = T ] && echo "LANG=zh_TW.UTF-8" > /mnt/home/$user/.xinitrc

echo "GTK_IM_MODULE=fcitx" >>/mnt/etc/environment
echo "QT_IM_MODULE=fcitx" >>/mnt/etc/environment
echo "XMODIFIERS=@im=fcitx" >>/mnt/etc/environment
arch-chroot /mnt ln -s /usr/bin/qterminal /usr/bin/xterm

[ $desktop = D ] && sed -i 's;^# session=/usr/bin/startlxde;session=/usr/bin/startlxde;g' /mnt/etc/lxdm/lxdm.conf
[ $desktop = Q ] && sed -i 's;^# session=/usr/bin/startlxde;session=/usr/bin/startlxqt;g' /mnt/etc/lxdm/lxdm.conf

# Setup TigerVNC
chroot /mnt ln /usr/lib/systemd/system/vncserver\@.service /etc/systemd/system/vncserver\@:1.service
echo ":1=$user" >>/mnt/etc/tigervnc/vncserver.users
mkdir /mnt/home/$user/.vnc
[ $desktop = D ] && echo "session=LXDE" >/mnt/home/$user/.vnc/config
[ $desktop = Q ] && echo "session=lxqt" >/mnt/home/$user/.vnc/config
arch-chroot /mnt sh -c "echo $password | vncpasswd -f >/home/$user/.vnc/passwd"
arch-chroot /mnt chmod 600 /home/$user/.vnc/passwd
arch-chroot /mnt chown -R ${user}: /home/$user/.vnc
arch-chroot /mnt systemctl enable vncserver@:1.service
[ $desktop = V ] || arch-chroot /mnt systemctl enable lxdm
### Other setting
echo -e "\n${c_red_b}Setting service ...${c_gray}\n"
sed -i '$i sleep 3' /mnt/etc/rc.local
sed -i '$d' /mnt/etc/rc.local
cat >>/mnt/etc/rc.local <<EOF
# ethernet auto detect
while read ether; do
    npath='/etc/systemd/network/'
    if [ ! -f "\$npath""10-\${ether}.network" ]; then
        cd \$npath
        source=\$(ls 10-en*.network | head -n 1)
        cp \$source 10-\${ether}.network
        sed -i 's/Name=.*/Name='"\$ether"'/' 10-\${ether}.network
        systemctl restart systemd-networkd
        cd -
    fi
done <<< \$(ip -o link show | awk '{print \$2,\$9}' | grep '^en' | sed 's/://' | awk '{print \$1}')

# systemctl stop systemd-journald-dev-log.socket systemd-journald.socket systemd-journald
# systemctl stop systemd-udevd-kernel.socket systemd-udevd-control.socket systemd-udevd 
# systemctl stop dbus.socket dbus 
# systemctl stop systemd-networkd
# hdparm -a0 /dev/sda >/dev/null 2>&1
exit 0
EOF
arch-chroot /mnt systemctl enable sshd ntpdate rc-local cpupower
arch-chroot /mnt systemctl disable ntpd
arch-chroot /mnt ln -s /usr/bin/vim /usr/bin/vi
###
echo 'ACTION=="add", SUBSYSTEM=="pci", ATTR{power/control}="auto"' >/mnt/etc/udev/rules.d/pci_pm.rules
cat >/mnt/etc/udev/rules.d/60-ioschedulers.rules <<EOF
# set scheduler for NVMe
ACTION=="add|change", KERNEL=="nvme[0-9]n[0-9]", ATTR{queue/scheduler}="none"
# set scheduler for SSD and eMMC
ACTION=="add|change", KERNEL=="sd[a-z]|mmcblk[0-9]*", ATTR{queue/rotational}=="0", ATTR{queue/scheduler}="kyber"
# set scheduler for rotating disks
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1", ATTR{queue/scheduler}="bfq"
EOF
sed -i 's/#Storage=auto/Storage=none/' /mnt/etc/systemd/journald.conf
sed -i 's/wait-online/wait-online --any/' /mnt/usr/lib/systemd/system/systemd-networkd-wait-online.service
# Desktop auto login
[ $desktop = V ] || sed -i 's/# autologin=.*/autologin='"$user"'/;s/# timeout=.*/timeout=0/' /mnt/etc/lxdm/lxdm.conf
### install config file
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/timezone.sh >/mnt/usr/bin/timezone.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/ether-cfg.sh >/mnt/usr/bin/ether-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/kernel-cfg.sh >/mnt/usr/bin/kernel-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/partimnt-cfg.sh >/mnt/usr/bin/partimnt-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/update_scpt.sh >/mnt/usr/bin/update_scpt.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/desktop-cfg.sh >/mnt/usr/bin/desktop-cfg.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/config.sh >/mnt/usr/bin/config.sh
curl -sL https://raw.githubusercontent.com/sam0402/ArchQ/main/config/qboot >/mnt/usr/bin/qboot
chmod +x /mnt/usr/bin/*.sh /mnt/usr/bin/qboot 
mkdir /mnt/home/$user/Desktop
arch-chroot /mnt ln -sf /usr/bin/config.sh /home/$user/Desktop/.
arch-chroot /mnt chown -R ${user}: /home/$user/Desktop
cat >>/mnt/home/${user}/.bashrc <<EOF
\$(uname -r | grep -q Qrip) && PSC=36 || PSC=31
export KVER=\$(uname -r | cut -d- -f3)
alias ...='cd ../../'
alias dir='command ls -lSrah'
alias egrep='egrep --color=auto'
alias grep='grep --color=auto'
alias ll='command ls -l --color=auto -v'
alias ls='command ls --color=auto -v'
alias poweroff='sudo systemctl poweroff'
alias reboot='sudo systemctl reboot'
alias config='sudo config.sh'
alias qboot='sudo qboot'
EOF
sed -i 's/\\h/\\h:\\e[0\;${PSC}m$KVER\\e[m/' /mnt/home/${user}/.bashrc

cat >>/mnt/root/.bashrc <<EOF
\$(uname -r | grep -q Qrip) && PSC=36 || PSC=31
export KVER=\$(uname -r | cut -d- -f3)
PS1='[\u@\h:\e[0;\${PSC}m\$KVER\e[m \W]\$ '
alias ...='cd ../../'
alias dir='command ls -lSrah'
alias egrep='egrep --color=auto'
alias grep='grep --color=auto'
alias ll='command ls -l --color=auto -v'
alias ls='command ls --color=auto -v'
alias config='config.sh'
EOF
arch-chroot /mnt sh -c 'yes | pacman -Scc'
rm -f /mnt/root/*.tar.zst /mnt/root/*.tar.xz
# Detect other OS
if [ -n "$old_efi" ]; then
    arch-chroot /mnt mount "$old_efi" /mnt
    arch-chroot /mnt os-prober
    sleep 2
    arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
fi

dialog --stdout --title "ArchQ Desktop" --pause "\n  ArchQ is installed, unplug the USB driver.\n\n  System will reboot after 10 seconds." 12 50 10; clear
reboot
